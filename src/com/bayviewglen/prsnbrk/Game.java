package com.bayviewglen.prsnbrk;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling * Version: 1.1 * Date:    March 2000 *  *  This class is the main class of the "Zork" application. Zork is a very *  simple, text based adventure game.  Users can walk around some scenery. *  That's all. It should really be extended to make it more interesting! *  *  To play this game, create an instance of this class and call the "play" *  routine. *  *  This main class creates and initialises all the others: it creates all *  rooms, creates the parser and starts the game.  It also evaluates the *  commands that the parser returns. */class Game {    private Parser parser;    private Room currentRoom;            /**     * Create the game and initialise its internal map.     */    public Game()     {        createRooms();        parser = new Parser();    }    /**     * Create all the rooms and link their exits together.     */    private void createRooms()    {        Room visitRoom, hall, cell, vents, cafeteria, abandonedSection, securityRoom;              // create the rooms        visitRoom = new Room("the visiting room. Your mom hasn't visited you in years. Soon.");        hall = new Room("the main hall. The hustle and bustle of the main prison hall.");        cell = new Room("your cell. What rhymes with hell? Your cell.");        vents = new Room("the vents. These vents sure are a great way to get places without being seen...");        cafeteria = new Room("the cafeteria. Who doesn't like food?");        abandonedSection = new Room("the abandoned quarter of the prison. Spiders are the least of your concerns in the abandoned quarter of the prison.");        securityRoom = new Room("the security room. Act like you belong. Fake it till you make it.");                // initialise room exits        visitRoom.setExits(null, hall, null, null);        hall.setExits(cell, null, abandonedSection, visitRoom);        cell.setExits(null, vents, hall, null);        vents.setExits(null, null, cafeteria, cell);        cafeteria.setExits(vents, securityRoom, null, null);        abandonedSection.setExits(hall, null, null, null);        securityRoom.setExits(null, null, null, cafeteria);                currentRoom = visitRoom;  // start game outside    }    /**     *  Main play routine.  Loops until end of play.     */    public void play()     {                    printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.                        boolean finished = false;        while (! finished)        {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    /**     * Print out the opening message for the player.     */    private void printWelcome()    {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a new, incredibly boring adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command)     {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("go"))            goRoom(command);        else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        return false;    }    // implementations of user commands:    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the      * command words.     */    private void printHelp()     {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        parser.showCommands();    }    /**      * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command)     {        if(!command.hasSecondWord())        {            // if there is no second word, we don't know where to go...            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        // Try to leave current room.        Room nextRoom = currentRoom.nextRoom(direction);        if (nextRoom == null)            System.out.println("There is no door!");        else         {            currentRoom = nextRoom;            System.out.println(currentRoom.longDescription());        }    }}